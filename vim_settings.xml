<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatTimeServiceImpl.php" timestamp="1534609943265">
        <mark key="'" line="222" column="34" />
        <mark key="[" line="207" column="97" />
        <mark key="]" line="189" column="0" />
        <mark key="^" line="222" column="61" />
        <mark key="." line="189" column="0" />
      </file>
      <file name="$USER_HOME$/www/ihospital/qy_web/src/WebBundle/Service/Pexip/PexipVideoUtil.php" timestamp="1534844381973" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/BaseStatService.php" timestamp="1534610019136">
        <mark key="[" line="41" column="96" />
        <mark key="]" line="35" column="22" />
        <mark key="." line="35" column="22" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" timestamp="1534610336016">
        <mark key="'" line="23" column="0" />
        <mark key="[" line="178" column="97" />
        <mark key="]" line="149" column="54" />
        <mark key="." line="149" column="54" />
        <mark key="^" line="64" column="34" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/ydyy.sh" timestamp="1534493792386">
        <mark key="[" line="17" column="7" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/dev/dev-2018-08-20.log" timestamp="1534774262885">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1534493113727">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/CacheStatService.php" timestamp="1534568698683">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="." line="7" column="0" />
        <mark key="^" line="29" column="11" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiCategoryRepository.php" timestamp="1534175572793">
        <mark key="[" line="96" column="13" />
        <mark key="]" line="96" column="13" />
        <mark key="." line="96" column="13" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/TokenServiceImpl.php" timestamp="1534834485345">
        <mark key="[" line="140" column="0" />
        <mark key="]" line="140" column="0" />
        <mark key="^" line="242" column="19" />
        <mark key="." line="140" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/RabbitMQBundle/Command/SwooleConsumerCommand.php" timestamp="1534494203248">
        <mark key="'" line="65" column="36" />
        <mark key="[" line="65" column="36" />
        <mark key="]" line="65" column="36" />
        <mark key="." line="65" column="36" />
        <mark key="^" line="65" column="36" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" timestamp="1534573259257">
        <mark key="[" line="58" column="9" />
        <mark key="]" line="58" column="1" />
        <mark key="^" line="58" column="1" />
        <mark key="." line="58" column="1" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/app/config/rabbitmq.yml" timestamp="1534244675130">
        <mark key="[" line="95" column="65" />
        <mark key="]" line="95" column="64" />
        <mark key="^" line="95" column="64" />
        <mark key="." line="95" column="64" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Controller/Tests/UtilController.php" timestamp="1534569899819">
        <mark key="[" line="133" column="64" />
        <mark key="]" line="6" column="0" />
        <mark key="^" line="167" column="29" />
        <mark key="." line="6" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Statistics/InterfaceController.php" timestamp="1534816234733">
        <mark key="[" line="105" column="69" />
        <mark key="]" line="91" column="1" />
        <mark key="^" line="91" column="1" />
        <mark key="." line="91" column="1" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/app/config/parameters.yml" timestamp="1534774193532">
        <mark key="[" line="4" column="25" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" timestamp="1534577446798">
        <mark key="'" line="39" column="10" />
        <mark key="[" line="204" column="42" />
        <mark key="]" line="204" column="27" />
        <mark key="." line="204" column="27" />
        <mark key="^" line="204" column="27" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/README.md" timestamp="1534320156916">
        <mark key="[" line="25" column="29" />
        <mark key="]" line="25" column="1" />
        <mark key="^" line="25" column="1" />
        <mark key="." line="25" column="1" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Util/Tools.php" timestamp="1534337880440">
        <mark key="[" line="1775" column="9" />
        <mark key="]" line="1773" column="11" />
        <mark key="." line="1773" column="11" />
        <mark key="^" line="1773" column="11" />
      </file>
      <file name="/PHP Console" timestamp="1534834529974">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" timestamp="1534816378696">
        <mark key="'" line="227" column="4" />
        <mark key="[" line="210" column="9" />
        <mark key="]" line="210" column="43" />
        <mark key="^" line="210" column="43" />
        <mark key="." line="210" column="43" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Resources/config/services.yml" timestamp="1534821198141">
        <mark key="[" line="25" column="21" />
        <mark key="]" line="25" column="22" />
        <mark key="." line="25" column="22" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/composer.json" timestamp="1534320022129">
        <mark key="[" line="34" column="0" />
        <mark key="]" line="34" column="0" />
        <mark key="." line="34" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Security/TokenAuthenticator.php" timestamp="1534831319848" />
      <file name="$USER_HOME$/www/ihospital/qy_web/liuende/test.php" timestamp="1534843291794">
        <mark key="[" line="53" column="6" />
        <mark key="]" line="52" column="0" />
        <mark key="." line="52" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiMessageRepository.php" timestamp="1534831678678">
        <mark key="[" line="72" column="106" />
        <mark key="]" line="72" column="88" />
        <mark key="^" line="72" column="88" />
        <mark key="." line="72" column="88" />
      </file>
      <file name="/Dummy.txt" timestamp="1534835758517">
        <mark key="[" line="0" column="5" />
        <mark key="]" line="0" column="5" />
        <mark key="." line="0" column="5" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-20.log" timestamp="1534774280169">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Resources/config/consumers.yml" timestamp="1534817037935">
        <mark key="[" line="2" column="14" />
        <mark key="]" line="2" column="16" />
        <mark key="^" line="2" column="16" />
        <mark key="." line="2" column="16" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/consumer.sh" timestamp="1534835750369">
        <mark key="[" line="113" column="49" />
        <mark key="]" line="113" column="47" />
        <mark key="." line="113" column="47" />
        <mark key="^" line="113" column="47" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Statistics/InTimeController.php" timestamp="1534571567602">
        <mark key="[" line="186" column="49" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
        <mark key="^" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/EventListener/MessageSubscriber.php" timestamp="1534821263685">
        <mark key="[" line="145" column="55" />
        <mark key="]" line="145" column="54" />
        <mark key="^" line="145" column="54" />
        <mark key="." line="145" column="54" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/liuende/test.php" timestamp="1534842090973">
        <mark key="'" line="1262" column="0" />
        <mark key="[" line="289" column="8" />
        <mark key="]" line="289" column="8" />
        <mark key="^" line="1297" column="11" />
        <mark key="." line="289" column="8" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Controller/GatewayController.php" timestamp="1534831583981" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/ApiMessageService.php" timestamp="1534610036855">
        <mark key="[" line="23" column="0" />
        <mark key="]" line="23" column="0" />
        <mark key="." line="23" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-16.log" timestamp="1534486579263">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/MessageQueue/Consumer/ConsumerManageServer.php" timestamp="1534490622289">
        <mark key="[" line="46" column="35" />
        <mark key="]" line="46" column="36" />
        <mark key="." line="46" column="36" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/ApiStatTimeService.php" timestamp="1534610007068">
        <mark key="[" line="27" column="97" />
        <mark key="]" line="27" column="3" />
        <mark key="." line="27" column="3" />
        <mark key="^" line="27" column="3" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-21.log" timestamp="1534816729367">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/TokenService.php" timestamp="1534831356654" />
    </filemarks>
    <jumps>
      <jump line="123" column="49" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="108" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="105" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="93" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="462" column="125" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="429" column="25" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="482" column="52" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="473" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="471" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="472" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="1265" column="14" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="115" column="5" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="22" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="211" column="8" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatTimeServiceImpl.php" />
      <jump line="232" column="34" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatTimeServiceImpl.php" />
      <jump line="258" column="40" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="235" column="56" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiMessageRepository.php" />
      <jump line="493" column="40" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="484" column="20" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="492" column="17" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="494" column="17" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="500" column="17" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="505" column="43" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="506" column="16" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="518" column="15" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="523" column="39" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="531" column="18" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="224" column="20" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="228" column="9" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="232" column="48" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="225" column="4" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="1241" column="15" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="1262" column="0" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="20" column="33" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-16.log" />
      <jump line="74" column="19" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="23" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="65" column="36" filename="$USER_HOME$/www/dhccam-2.0/src/RabbitMQBundle/Command/SwooleConsumerCommand.php" />
      <jump line="146" column="23" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="210" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="29" column="9" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="426" column="8" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="39" column="10" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-21.log" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">PD9waHAK</text>
      </register>
      <register name="-" type="4">
        <text>rest</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxGQUlMX0tFWVw+</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICAgICAgTG9nOjpvdXQoJ0FwaU1lc3NhZ2VSZXBvc2l0b3J5JywgJ0UnLCAnW21lc3NhZ2VdOiAnIC4gJGUtPmdldE1lc3NhZ2UoKSwgJyBbdHJhY2VdOicgLiAkZS0+Z2V0VHJhY2VBc1N0cmluZygpKTsK</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">PD9waHAK</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICByZXR1cm4gdHJ1ZTsK</text>
      </register>
      <register name="3" type="4">
        <text>);
                }</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAK</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">WzIwMTgtMDgtMjEgMDk6NTc6MjFdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgYS5pZCBBUyBpZCwgYS5uYW1lIEFTIG5hbWUsYS5jb2RlIEFTIGNvZGUsYi50b3RhbENvdW50IEFTIHZhbHVlIEZST00gdXNlcl9hcHBfbGluayBhICBJTk5FUiBKT0lOIChTRUxFQ1QgU1VNKHQucmVxdWVzdF9jb3VudCkgQVMgdG90YWxDb3VudCwgIHQudXNlcl9hcHBfbGlua19pZCBBUyB1c2VyX2FwcF9saW5rIEZST00gYXBpX3N0YXRfZGF5IHQgV0hFUkUgKHQucmVxdWVzdF90aW1lID49ID8gQU5EIHQucmVxdWVzdF90aW1lIDwgPykgQU5EICh0LmRlbGV0ZV90aW1lIElTIE5VTEwpIEdST1VQIEJZIHQudXNlcl9hcHBfbGlua19pZCBPUkRFUiBCWSB0b3RhbENvdW50IERFU0MgIExJTUlUIDIwKSBiIE9OIGEuaWQgPSBiLnVzZXJfYXBwX2xpbmsgWyIyMDE4LTA4LTIwIDAwOjAwOjAwIiwiMjAxOC0wOC0yMSAwMDowMDowMCJdIFtdClsyMDE4LTA4LTIxIDA5OjU3OjIzXSBkb2N0cmluZS5ERUJVRzogU0VMRUNUIHQwLmlkIEFTIGlkXzEsIHQwLnVzZXJuYW1lIEFTIHVzZXJuYW1lXzIsIHQwLnBhc3N3ZCBBUyBwYXNzd2RfMywgdDAuYWRkcmVzcyBBUyBhZGRyZXNzXzQsIHQwLnBob25lIEFTIHBob25lXzUsIHQwLmVtYWlsIEFTIGVtYWlsXzYsIHQwLnNlY3JldF9rZXkgQVMgc2VjcmV0X2tleV83LCB0MC5zZWNyZXRfZHVyYXRpb24gQVMgc2VjcmV0X2R1cmF0aW9uXzgsIHQwLmZvcmJpZCBBUyBmb3JiaWRfOSwgdDAuY3JlYXRlX3RpbWUgQVMgY3JlYXRlX3RpbWVfMTAsIHQwLnVwZGF0ZV90aW1lIEFTIHVwZGF0ZV90aW1lXzExLCB0MC5kZWxldGVfdGltZSBBUyBkZWxldGVfdGltZV8xMiwgdDAucm9sZV9pZCBBUyByb2xlX2lkXzEzIEZST00gdXNlciB0MCBXSEVSRSB0MC51c2VybmFtZSA9ID8gQU5EICgodDAuZGVsZXRlX3RpbWUgSVMgTlVMTCkpIExJTUlUIDEgWyJhZG1pbiJdIFtdClsyMDE4LTA4LTIxIDA5OjU3OjIzXSBkb2N0cmluZS5ERUJVRzogU0VMRUNUIHQwLmlkIEFTIGlkXzEsIHQwLmNvZGUgQVMgY29kZV8yLCB0MC5uYW1lIEFTIG5hbWVfMywgdDAuY3JlYXRlX3RpbWUgQVMgY3JlYXRlX3RpbWVfNCwgdDAudXBkYXRlX3RpbWUgQVMgdXBkYXRlX3RpbWVfNSwgdDAuZGVsZXRlX3RpbWUgQVMgZGVsZXRlX3RpbWVfNiBGUk9NIHJvbGUgdDAgV0hFUkUgdDAuaWQgPSA/IEFORCAoKHQwLmRlbGV0ZV90aW1lIElTIE5VTEwpKSBbMV0gW10KWzIwMTgtMDgtMjEgMDk6NTc6MjNdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgU1VNKGEwXy5hdmdfYW5zd2VyX3RpbWUgKiBhMF8ucmVxdWVzdF9jb3VudCkgQVMgc2Nscl8wLCBNQVgoYTBfLm1heF9hbnN3ZXJfdGltZSkgQVMgc2Nscl8xLCBTVU0oQ0FTRSBXSEVOIGEwXy5zdGF0dXMgPSAxIFRIRU4gYTBfLnJlcXVlc3RfY291bnQgRUxTRSAwIEVORCkgQVMgc2Nscl8yLCBTVU0oQ0FTRSBXSEVOIGEwXy5zdGF0dXMgPSAwIFRIRU4gYTBfLnJlcXVlc3RfY291bnQgRUxTRSAwIEVORCkgQVMgc2Nscl8zIEZST00gYXBpX3N0YXRfZGF5IGEwXyBXSEVSRSAoYTBfLnJlcXVlc3RfdGltZSA+PSA/IEFORCBhMF8ucmVxdWVzdF90aW1lIDwgPykgQU5EIChhMF8uZGVsZXRlX3RpbWUgSVMgTlVMTCkgT1JERVIgQlkgYTBfLnJlcXVlc3RfdGltZSBBU0MgWyIyMDE4LTAxLTAxIDAwOjAwOjAwIiwiMjAxOC0wOC0yMSAwMDowMDowMCJdIFtdClsyMDE4LTA4LTIxIDA5OjU3OjIzXSBkb2N0cmluZS5ERUJVRzogU0VMRUNUIFNVTShhMF8uYXZnX2Fuc3dlcl90aW1lICogYTBfLnJlcXVlc3RfY291bnQpIEFTIHNjbHJfMCwgTUFYKGEwXy5tYXhfYW5zd2VyX3RpbWUpIEFTIHNjbHJfMSwgU1VNKENBU0UgV0hFTiBhMF8uc3RhdHVzID0gMSBUSEVOIGEwXy5yZXF1ZXN0X2NvdW50IEVMU0UgMCBFTkQpIEFTIHNjbHJfMiwgU1VNKENBU0UgV0hFTiBhMF8uc3RhdHVzID0gMCBUSEVOIGEwXy5yZXF1ZXN0X2NvdW50IEVMU0UgMCBFTkQpIEFTIHNjbHJfMyBGUk9NIGFwaV9zdGF0X2RheSBhMF8gV0hFUkUgKGEwXy5yZXF1ZXN0X3RpbWUgPj0gPyBBTkQgYTBfLnJlcXVlc3RfdGltZSA8ID8pIEFORCAoYTBfLmRlbGV0ZV90aW1lIElTIE5VTEwpIE9SREVSIEJZIGEwXy5yZXF1ZXN0X3RpbWUgQVNDIFsiMjAxOC0wOC0yMCAwMDowMDowMCIsIjIwMTgtMDgtMjEgMDA6MDA6MDAiXSBbXQpbMjAxOC0wOC0yMSAwOTo1NzoyM10gZG9jdHJpbmUuREVCVUc6IFNFTEVDVCBTVU0oYTBfLmF2Z19hbnN3ZXJfdGltZSAqIGEwXy5yZXF1ZXN0X2NvdW50KSBBUyBzY2xyXzAsIE1BWChhMF8ubWF4X2Fuc3dlcl90aW1lKSBBUyBzY2xyXzEsIFNVTShDQVNFIFdIRU4gYTBfLnN0YXR1cyA9IDEgVEhFTiBhMF8ucmVxdWVzdF9jb3VudCBFTFNFIDAgRU5EKSBBUyBzY2xyXzIsIFNVTShDQVNFIFdIRU4gYTBfLnN0YXR1cyA9IDAgVEhFTiBhMF8ucmVxdWVzdF9jb3VudCBFTFNFIDAgRU5EKSBBUyBzY2xyXzMgRlJPTSBhcGlfc3RhdF9kYXkgYTBfIFdIRVJFIChhMF8ucmVxdWVzdF90aW1lID49ID8gQU5EIGEwXy5yZXF1ZXN0X3RpbWUgPCA/KSBBTkQgKGEwXy5kZWxldGVfdGltZSBJUyBOVUxMKSBPUkRFUiBCWSBhMF8ucmVxdWVzdF90aW1lIEFTQyBbIjIwMTgtMDgtMTQgMDA6MDA6MDAiLCIyMDE4LTA4LTIxIDAwOjAwOjAwIl0gW10KWzIwMTgtMDgtMjEgMDk6NTc6MjNdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgU1VNKGEwXy5hdmdfYW5zd2VyX3RpbWUgKiBhMF8ucmVxdWVzdF9jb3VudCkgQVMgc2Nscl8wLCBNQVgoYTBfLm1heF9hbnN3ZXJfdGltZSkgQVMgc2Nscl8xLCBTVU0oQ0FTRSBXSEVOIGEwXy5zdGF0dXMgPSAxIFRIRU4gYTBfLnJlcXVlc3RfY291bnQgRUxTRSAwIEVORCkgQVMgc2Nscl8yLCBTVU0oQ0FTRSBXSEVOIGEwXy5zdGF0dXMgPSAwIFRIRU4gYTBfLnJlcXVlc3RfY291bnQgRUxTRSAwIEVORCkgQVMgc2Nscl8zIEZST00gYXBpX3N0YXRfZGF5IGEwXyBXSEVSRSAoYTBfLnJlcXVlc3RfdGltZSA+PSA/IEFORCBhMF8ucmVxdWVzdF90aW1lIDwgPykgQU5EIChhMF8uZGVsZXRlX3RpbWUgSVMgTlVMTCkgT1JERVIgQlkgYTBfLnJlcXVlc3RfdGltZSBBU0MgWyIyMDE4LTA3LTIyIDAwOjAwOjAwIiwiMjAxOC0wOC0yMSAwMDowMDowMCJdIFtdCg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">WzIwMTgtMDgtMjEgMDk6NTc6MThdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgdDAuaWQgQVMgaWRfMSwgdDAudXNlcm5hbWUgQVMgdXNlcm5hbWVfMiwgdDAucGFzc3dkIEFTIHBhc3N3ZF8zLCB0MC5hZGRyZXNzIEFTIGFkZHJlc3NfNCwgdDAucGhvbmUgQVMgcGhvbmVfNSwgdDAuZW1haWwgQVMgZW1haWxfNiwgdDAuc2VjcmV0X2tleSBBUyBzZWNyZXRfa2V5XzcsIHQwLnNlY3JldF9kdXJhdGlvbiBBUyBzZWNyZXRfZHVyYXRpb25fOCwgdDAuZm9yYmlkIEFTIGZvcmJpZF85LCB0MC5jcmVhdGVfdGltZSBBUyBjcmVhdGVfdGltZV8xMCwgdDAudXBkYXRlX3RpbWUgQVMgdXBkYXRlX3RpbWVfMTEsIHQwLmRlbGV0ZV90aW1lIEFTIGRlbGV0ZV90aW1lXzEyLCB0MC5yb2xlX2lkIEFTIHJvbGVfaWRfMTMgRlJPTSB1c2VyIHQwIFdIRVJFIHQwLnVzZXJuYW1lID0gPyBBTkQgKCh0MC5kZWxldGVfdGltZSBJUyBOVUxMKSkgTElNSVQgMSBbImFkbWluIl0gW10KWzIwMTgtMDgtMjEgMDk6NTc6MThdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgdDAuaWQgQVMgaWRfMSwgdDAuY29kZSBBUyBjb2RlXzIsIHQwLm5hbWUgQVMgbmFtZV8zLCB0MC5jcmVhdGVfdGltZSBBUyBjcmVhdGVfdGltZV80LCB0MC51cGRhdGVfdGltZSBBUyB1cGRhdGVfdGltZV81LCB0MC5kZWxldGVfdGltZSBBUyBkZWxldGVfdGltZV82IEZST00gcm9sZSB0MCBXSEVSRSB0MC5pZCA9ID8gQU5EICgodDAuZGVsZXRlX3RpbWUgSVMgTlVMTCkpIFsxXSBbXQpbMjAxOC0wOC0yMSAwOTo1NzoxOV0gZG9jdHJpbmUuREVCVUc6IFNFTEVDVCBTVU0oYTBfLmF2Z19hbnN3ZXJfdGltZSAqIGEwXy5yZXF1ZXN0X2NvdW50KSBBUyBzY2xyXzAsIE1BWChhMF8ubWF4X2Fuc3dlcl90aW1lKSBBUyBzY2xyXzEsIFNVTShDQVNFIFdIRU4gYTBfLnN0YXR1cyA9IDEgVEhFTiBhMF8ucmVxdWVzdF9jb3VudCBFTFNFIDAgRU5EKSBBUyBzY2xyXzIsIFNVTShDQVNFIFdIRU4gYTBfLnN0YXR1cyA9IDAgVEhFTiBhMF8ucmVxdWVzdF9jb3VudCBFTFNFIDAgRU5EKSBBUyBzY2xyXzMsIERBVEVfRk9STUFUKGEwXy5yZXF1ZXN0X3RpbWUsICclWS0lbS0lZCcpIEFTIHNjbHJfNCBGUk9NIGFwaV9zdGF0X2RheSBhMF8gV0hFUkUgKGEwXy5yZXF1ZXN0X3RpbWUgPj0gPyBBTkQgYTBfLnJlcXVlc3RfdGltZSA8ID8pIEFORCAoYTBfLmRlbGV0ZV90aW1lIElTIE5VTEwpIEdST1VQIEJZIHNjbHJfNCBPUkRFUiBCWSBhMF8ucmVxdWVzdF90aW1lIEFTQyBbIjIwMTgtMDgtMTQgMDA6MDA6MDAiLCIyMDE4LTA4LTIxIDAwOjAwOjAwIl0gW10KWzIwMTgtMDgtMjEgMDk6NTc6MjBdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgdDAuaWQgQVMgaWRfMSwgdDAudXNlcm5hbWUgQVMgdXNlcm5hbWVfMiwgdDAucGFzc3dkIEFTIHBhc3N3ZF8zLCB0MC5hZGRyZXNzIEFTIGFkZHJlc3NfNCwgdDAucGhvbmUgQVMgcGhvbmVfNSwgdDAuZW1haWwgQVMgZW1haWxfNiwgdDAuc2VjcmV0X2tleSBBUyBzZWNyZXRfa2V5XzcsIHQwLnNlY3JldF9kdXJhdGlvbiBBUyBzZWNyZXRfZHVyYXRpb25fOCwgdDAuZm9yYmlkIEFTIGZvcmJpZF85LCB0MC5jcmVhdGVfdGltZSBBUyBjcmVhdGVfdGltZV8xMCwgdDAudXBkYXRlX3RpbWUgQVMgdXBkYXRlX3RpbWVfMTEsIHQwLmRlbGV0ZV90aW1lIEFTIGRlbGV0ZV90aW1lXzEyLCB0MC5yb2xlX2lkIEFTIHJvbGVfaWRfMTMgRlJPTSB1c2VyIHQwIFdIRVJFIHQwLnVzZXJuYW1lID0gPyBBTkQgKCh0MC5kZWxldGVfdGltZSBJUyBOVUxMKSkgTElNSVQgMSBbImFkbWluIl0gW10KWzIwMTgtMDgtMjEgMDk6NTc6MjBdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgdDAuaWQgQVMgaWRfMSwgdDAuY29kZSBBUyBjb2RlXzIsIHQwLm5hbWUgQVMgbmFtZV8zLCB0MC5jcmVhdGVfdGltZSBBUyBjcmVhdGVfdGltZV80LCB0MC51cGRhdGVfdGltZSBBUyB1cGRhdGVfdGltZV81LCB0MC5kZWxldGVfdGltZSBBUyBkZWxldGVfdGltZV82IEZST00gcm9sZSB0MCBXSEVSRSB0MC5pZCA9ID8gQU5EICgodDAuZGVsZXRlX3RpbWUgSVMgTlVMTCkpIFsxXSBbXQpbMjAxOC0wOC0yMSAwOTo1NzoyMV0gZG9jdHJpbmUuREVCVUc6IFNFTEVDVCBhLmlkIEFTIGlkLCBhLmFwaV9uYW1lIEFTIG5hbWUsYS5hcGlfY29kZSBBUyBjb2RlLGIudG90YWxDb3VudCBBUyB2YWx1ZSBGUk9NIGFwaSBhICBJTk5FUiBKT0lOIChTRUxFQ1QgU1VNKHQucmVxdWVzdF9jb3VudCkgQVMgdG90YWxDb3VudCwgIHQuYXBpX2lkIEFTIGFwaSBGUk9NIGFwaV9zdGF0X2RheSB0IFdIRVJFICh0LnJlcXVlc3RfdGltZSA+PSA/IEFORCB0LnJlcXVlc3RfdGltZSA8ID8pIEFORCAodC5kZWxldGVfdGltZSBJUyBOVUxMKSBHUk9VUCBCWSB0LmFwaV9pZCBPUkRFUiBCWSB0b3RhbENvdW50IERFU0MgIExJTUlUIDIwKSBiIE9OIGEuaWQgPSBiLmFwaSBbIjIwMTgtMDgtMjAgMDA6MDA6MDAiLCIyMDE4LTA4LTIxIDAwOjAwOjAwIl0gW10KWzIwMTgtMDgtMjEgMDk6NTc6MjFdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgYS5pZCBBUyBpZCwgYS5hcHBfbmFtZSBBUyBuYW1lLGEuYXBwX2NvZGUgQVMgY29kZSxiLnRvdGFsQ291bnQgQVMgdmFsdWUgRlJPTSBhcHBsaWNhdGlvbiBhICBJTk5FUiBKT0lOIChTRUxFQ1QgU1VNKHQucmVxdWVzdF9jb3VudCkgQVMgdG90YWxDb3VudCwgIHQuYXBwbGljYXRpb25faWQgQVMgYXBwbGljYXRpb24gRlJPTSBhcGlfc3RhdF9kYXkgdCBXSEVSRSAodC5yZXF1ZXN0X3RpbWUgPj0gPyBBTkQgdC5yZXF1ZXN0X3RpbWUgPCA/KSBBTkQgKHQuZGVsZXRlX3RpbWUgSVMgTlVMTCkgR1JPVVAgQlkgdC5hcHBsaWNhdGlvbl9pZCBPUkRFUiBCWSB0b3RhbENvdW50IERFU0MgIExJTUlUIDIwKSBiIE9OIGEuaWQgPSBiLmFwcGxpY2F0aW9uIFsiMjAxOC0wOC0yMCAwMDowMDowMCIsIjIwMTgtMDgtMjEgMDA6MDA6MDAiXSBbXQpbMjAxOC0wOC0yMSAwOTo1NzoyMV0gZG9jdHJpbmUuREVCVUc6IFNFTEVDVCBhLmlkIEFTIGlkLCBhLm5hbWUgQVMgbmFtZSxhLmNvZGUgQVMgY29kZSxiLnRvdGFsQ291bnQgQVMgdmFsdWUgRlJPTSBhcGlfY2F0ZWdvcnkgYSAgSU5ORVIgSk9JTiAoU0VMRUNUIFNVTSh0LnJlcXVlc3RfY291bnQpIEFTIHRvdGFsQ291bnQsICB0LmFwaV9jYXRlZ29yeV9pZCBBUyBjYXRlZ29yeSBGUk9NIGFwaV9zdGF0X2RheSB0IFdIRVJFICh0LnJlcXVlc3RfdGltZSA+PSA/IEFORCB0LnJlcXVlc3RfdGltZSA8ID8pIEFORCAodC5kZWxldGVfdGltZSBJUyBOVUxMKSBHUk9VUCBCWSB0LmFwaV9jYXRlZ29yeV9pZCBPUkRFUiBCWSB0b3RhbENvdW50IERFU0MgIExJTUlUIDIwKSBiIE9OIGEuaWQgPSBiLmNhdGVnb3J5IFsiMjAxOC0wOC0yMCAwMDowMDowMCIsIjIwMTgtMDgtMjEgMDA6MDA6MDAiXSBbXQpbMjAxOC0wOC0yMSAwOTo1NzoyMV0gZG9jdHJpbmUuREVCVUc6IFNFTEVDVCBhLmlkIEFTIGlkLCBhLnVzZXJuYW1lIEFTIG5hbWUsYS51c2VybmFtZSBBUyBjb2RlLGIudG90YWxDb3VudCBBUyB2YWx1ZSBGUk9NIHVzZXIgYSAgSU5ORVIgSk9JTiAoU0VMRUNUIFNVTSh0LnJlcXVlc3RfY291bnQpIEFTIHRvdGFsQ291bnQsICB0LnN1YnNjcmliZXJfaWQgQVMgc3Vic2NyaWJlciAgRlJPTSBhcGlfc3RhdF9kYXkgdCBXSEVSRSAodC5yZXF1ZXN0X3RpbWUgPj0gPyBBTkQgdC5yZXF1ZXN0X3RpbWUgPCA/KSBBTkQgKHQuZGVsZXRlX3RpbWUgSVMgTlVMTCkgR1JPVVAgQlkgdC5zdWJzY3JpYmVyX2lkIE9SREVSIEJZIHRvdGFsQ291bnQgREVTQyAgTElNSVQgMjApIGIgT04gYS5pZCA9IGIuc3Vic2NyaWJlciBbIjIwMTgtMDgtMjAgMDA6MDA6MDAiLCIyMDE4LTA4LTIxIDAwOjAwOjAwIl0gW10K</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">MjAxOC0wOC0yMSAwOTo1NDoxNF0gZG9jdHJpbmUuREVCVUc6IFNFTEVDVCBDT1VOVChhMF8uaWQpIEFTIHNjbHJfMCBGUk9NIGFwaSBhMF8gV0hFUkUgKGEwXy5kZWxldGVfdGltZSBJUyBOVUxMKSBbXSBbXQo=</text>
      </register>
      <register name="8" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="9" type="2">
        <text encoding="base64"></text>
      </register>
      <register name=":" type="4">
        <text>wq</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxGQUlMX0tFWVw+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxGQUlMX0tFWVw+</last-pattern>
      <last-replace>COUNT_EMPTY_KEYS</last-replace>
      <last-substitute>EMPTY_KEYS</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxsb2dmaWxlXD4=</entry>
        <entry encoding="base64">XDxfU0VSVkVSXD4=</entry>
        <entry>$_SERVER</entry>
        <entry>homeTrendStat</entry>
        <entry encoding="base64">XDxob21lVHJlbmRTdGF0XD4=</entry>
        <entry>home</entry>
        <entry>chart</entry>
        <entry>chartPercentageStat</entry>
        <entry encoding="base64">XDxFTVBUWV9LRVlTXD4=</entry>
        <entry>EMPTY_KEYS</entry>
        <entry encoding="base64">XDxGQUlMX0tFWVw+</entry>
      </history-search>
      <history-cmd>
        <entry>.,$s/$_SERVER/data/g</entry>
        <entry>.,$s/$_SERVER/$data/g</entry>
        <entry>sp</entry>
        <entry>vs</entry>
        <entry>90</entry>
        <entry>%s/EMPTY_KEYS/COUNT_EMPTY_KEYS</entry>
        <entry>wq</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>