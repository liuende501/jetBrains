<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/www/dhccam-2.0/sync.sh" timestamp="1535371121735">
        <mark key="[" line="10" column="131" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Filter/Filter.php" timestamp="1536143036895">
        <mark key="[" line="128" column="45" />
        <mark key="]" line="125" column="0" />
        <mark key="." line="125" column="0" />
        <mark key="^" line="124" column="65" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgeneold/src/soap.php" timestamp="1535188011497">
        <mark key="[" line="10" column="39" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/ydyy.sh" timestamp="1535016027349">
        <mark key="[" line="17" column="7" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgeneold/src/main.php" timestamp="1535187941808">
        <mark key="[" line="52" column="41" />
        <mark key="]" line="52" column="41" />
        <mark key="." line="52" column="41" />
      </file>
      <file name="/a.dummy" timestamp="1535182991931">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/CacheStatService.php" timestamp="1535333666813">
        <mark key="[" line="35" column="35" />
        <mark key="]" line="35" column="52" />
        <mark key="." line="35" column="35" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/ApiServiceMethodService.php" timestamp="1536288445684">
        <mark key="[" line="30" column="0" />
        <mark key="]" line="30" column="0" />
        <mark key="." line="30" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/TokenServiceImpl.php" timestamp="1535690319181">
        <mark key="[" line="139" column="5" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Filter/SignFilter.php" timestamp="1536142529160">
        <mark key="[" line="78" column="24" />
        <mark key="]" line="78" column="24" />
        <mark key="." line="78" column="24" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" timestamp="1536382707503" />
      <file name="$USER_HOME$/www/dhccam-2.0/app/config/parameters.yml" timestamp="1536307474231">
        <mark key="[" line="4" column="28" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ConsumerTaskServiceImpl.php" timestamp="1536240575249">
        <mark key="[" line="154" column="105" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/vendor/dhcmediway/wsdl2phpgenerator/src/Method.php" timestamp="1535179252102">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" timestamp="1535342387257">
        <mark key="[" line="484" column="13" />
        <mark key="]" line="484" column="13" />
        <mark key="." line="484" column="13" />
      </file>
      <file name="$USER_HOME$/www/lnmp/lnmp.conf" timestamp="1535557518415">
        <mark key="[" line="14" column="20" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Controller/Tests/LController.php" timestamp="1536382974564" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/ApiServiceMethod.php" timestamp="1535204422950">
        <mark key="[" line="59" column="67" />
        <mark key="]" line="59" column="48" />
        <mark key="." line="59" column="48" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Development/DebugController.php" timestamp="1536221946285">
        <mark key="[" line="302" column="32" />
        <mark key="]" line="302" column="32" />
        <mark key="." line="302" column="32" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/Wsdl2PhpServiceImpl.php" timestamp="1535370995159">
        <mark key="[" line="156" column="33" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/output/HospitalExamIndexWsServiceService.php" timestamp="1535200217617">
        <mark key="[" line="47" column="41" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/mwb/dhccma-user.sql" timestamp="1535686351622">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessServer/RestRequest.php" timestamp="1535717747135">
        <mark key="[" line="93" column="8" />
        <mark key="]" line="93" column="8" />
        <mark key="." line="93" column="8" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/EventListener/CorsListener.php" timestamp="1536383237239" />
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/request.php" timestamp="1535199052253">
        <mark key="[" line="23" column="53" />
        <mark key="]" line="23" column="53" />
        <mark key="." line="23" column="53" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/ApiServiceServiceImpl.php" timestamp="1536289526385">
        <mark key="[" line="493" column="73" />
        <mark key="]" line="493" column="73" />
        <mark key="." line="493" column="73" />
      </file>
      <file name="$USER_HOME$/www/ihospital/qy_web/liuende/test.php" timestamp="1535970065654">
        <mark key="[" line="64" column="37" />
        <mark key="]" line="64" column="37" />
        <mark key="." line="64" column="37" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/mwb/dhccam-user.sql" timestamp="1535685486648">
        <mark key="[" line="17" column="27" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessServer/BusinessServer.php" timestamp="1535717668034">
        <mark key="[" line="55" column="55" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiMessageRepository.php" timestamp="1536339745395">
        <mark key="[" line="338" column="70" />
        <mark key="]" line="338" column="70" />
        <mark key="." line="338" column="70" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/ApiServiceMethodServiceImpl.php" timestamp="1536289399695">
        <mark key="^" line="140" column="28" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" timestamp="1536384785591">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/liuende/soap.php" timestamp="1535092978277">
        <mark key="[" line="11" column="34" />
        <mark key="]" line="14" column="0" />
        <mark key="." line="14" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/ApiMessage.php" timestamp="1536307986451">
        <mark key="[" line="83" column="53" />
        <mark key="]" line="83" column="63" />
        <mark key="." line="83" column="53" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/soap.php" timestamp="1535197310228">
        <mark key="[" line="27" column="48" />
        <mark key="]" line="27" column="25" />
        <mark key="." line="27" column="25" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Statistics/InTimeController.php" timestamp="1535333593505">
        <mark key="[" line="184" column="49" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/liuende/test.php" timestamp="1536114714630">
        <mark key="[" line="1306" column="4" />
        <mark key="]" line="1306" column="4" />
        <mark key="." line="1306" column="4" />
        <mark key="^" line="1306" column="6" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-07.log" timestamp="1536309627710">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Development/MessageTraceController.php" timestamp="1536384721502">
        <mark key="[" line="61" column="28" />
        <mark key="]" line="61" column="28" />
        <mark key="." line="61" column="28" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Service.php" timestamp="1536068538361">
        <mark key="[" line="167" column="23" />
        <mark key="]" line="167" column="23" />
        <mark key="." line="167" column="23" />
      </file>
      <file name="$USER_HOME$/www/lnmp/install.sh" timestamp="1535557885171">
        <mark key="[" line="57" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AdminServiceImpl.php" timestamp="1536384744755" />
      <file name="$USER_HOME$/www/dhccam-2.0/merge.sh" timestamp="1536293471006">
        <mark key="[" line="49" column="27" />
        <mark key="]" line="50" column="43" />
        <mark key="^" line="50" column="43" />
        <mark key="." line="50" column="43" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessProcess/BusinessProcess.php" timestamp="1535716949335">
        <mark key="[" line="69" column="77" />
      </file>
      <file name="$USER_HOME$/www/lnmp/include/init.sh" timestamp="1535598429701">
        <mark key="[" line="455" column="8" />
        <mark key="]" line="455" column="8" />
        <mark key="." line="455" column="8" />
      </file>
      <file name="/Clipboard.txt" timestamp="1535879732483">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/SignGenerator/20180905.log" timestamp="1536114307752">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/vendor/dhcmediway/wsdl2phpgenerator/src/Generator.php" timestamp="1535204800564">
        <mark key="[" line="165" column="27" />
        <mark key="]" line="165" column="27" />
        <mark key="." line="165" column="27" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/HomeServiceImpl.php" timestamp="1536030534962">
        <mark key="[" line="110" column="37" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Statistics/InterfaceController.php" timestamp="1536030530210">
        <mark key="[" line="99" column="53" />
        <mark key="]" line="100" column="55" />
        <mark key="^" line="100" column="55" />
        <mark key="." line="100" column="55" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/README.md" timestamp="1536382802815" />
      <file name="$USER_HOME$/www/ihospital/qy_web/app/logs/XmlHelper/20180902.log" timestamp="1535874696635">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/SoapInit/SoapInit5b81605615a23/HospitalExamIndexWsServiceService.php" timestamp="1535206392750">
        <mark key="[" line="48" column="15" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Filter/SignGenerator.php" timestamp="1536141066291">
        <mark key="[" line="131" column="4" />
        <mark key="]" line="127" column="0" />
        <mark key="." line="127" column="0" />
      </file>
      <file name="/PHP Console" timestamp="1536384887145">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessServer/SoapRequest.php" timestamp="1536286052405">
        <mark key="[" line="68" column="53" />
        <mark key="]" line="68" column="52" />
        <mark key="." line="68" column="52" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Method.php" timestamp="1535175135112">
        <mark key="[" line="53" column="0" />
        <mark key="]" line="53" column="0" />
        <mark key="." line="53" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiStatTimeRepository.php" timestamp="1536339778042">
        <mark key="[" line="122" column="68" />
        <mark key="]" line="235" column="56" />
        <mark key="." line="235" column="56" />
        <mark key="^" line="235" column="56" />
      </file>
      <file name="/Dummy.txt" timestamp="1536293297884">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="/fragment.php" timestamp="1535173118701">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/main.php" timestamp="1536068156853">
        <mark key="[" line="13" column="84" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Location.php" timestamp="1535173669776">
        <mark key="[" line="57" column="0" />
        <mark key="]" line="57" column="0" />
        <mark key="." line="57" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/document/缓存.md" timestamp="1535205775654">
        <mark key="[" line="122" column="24" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Filter/ApiConfigService.php" timestamp="1535717776605">
        <mark key="[" line="209" column="43" />
      </file>
      <file name="$USER_HOME$/www/demo/util/moniorwx.php" timestamp="1536135663222">
        <mark key="[" line="35" column="18" />
        <mark key="]" line="35" column="18" />
        <mark key="." line="35" column="18" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/output/WebServiceEntryService.php" timestamp="1535089130255">
        <mark key="[" line="36" column="0" />
        <mark key="]" line="36" column="0" />
        <mark key="." line="36" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="123" column="49" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="108" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="105" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="93" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AllocationServiceImpl.php" />
      <jump line="462" column="125" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="429" column="25" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="482" column="52" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="473" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="471" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="472" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="1265" column="14" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="115" column="5" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="22" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="211" column="8" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatTimeServiceImpl.php" />
      <jump line="232" column="34" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatTimeServiceImpl.php" />
      <jump line="258" column="40" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="235" column="56" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiMessageRepository.php" />
      <jump line="493" column="40" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="484" column="20" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="492" column="17" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="494" column="17" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="500" column="17" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="505" column="43" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="506" column="16" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="518" column="15" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="523" column="39" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="531" column="18" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="224" column="20" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="228" column="9" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="232" column="48" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="225" column="4" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="1241" column="15" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="1262" column="0" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="20" column="33" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-16.log" />
      <jump line="74" column="19" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="23" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="65" column="36" filename="$USER_HOME$/www/dhccam-2.0/src/RabbitMQBundle/Command/SwooleConsumerCommand.php" />
      <jump line="146" column="23" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="210" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="29" column="9" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="426" column="8" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="39" column="10" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-21.log" />
      <jump line="11" column="22" filename="$USER_HOME$/www/dhccam-2.0/app/config/config_dev.yml" />
      <jump line="44" column="23" filename="$USER_HOME$/www/dhccam-2.0/branches.txt" />
      <jump line="59" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/ApiServiceMethodServiceImpl.php" />
      <jump line="390" column="25" filename="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Generator.php" />
      <jump line="139" column="44" filename="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Service.php" />
      <jump line="170" column="54" filename="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Service.php" />
      <jump line="19" column="358" filename="$USER_HOME$/www/ihospital/qy_web/app/logs/XmlHelper/20180902.log" />
      <jump line="2" column="21" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-07.log" />
      <jump line="1" column="1" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-07.log" />
      <jump line="18" column="15" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="8" column="162" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="1" column="80" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="7" column="686" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">anNvbl9lbmNvZGUoWydyZXF1ZXN0X3RpbWUnPT5dKQ==</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxGQUlMX0tFWVw+</text>
      </register>
      <register name="0" type="4">
        <text>release-${branch}</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="3" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="4" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="5" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ClsyMDE4LTA5LTA4IDEzOjIwOjI1XSBkb2N0cmluZS5ERUJVRzogU0VMRUNUIHQwLmlkIEFTIGlkXzEsIHQwLnVzZXJuYW1lIEFTIHVzZXJuYW1lXzIsIHQwLnBhc3N3ZCBBUyBwYXNzd2RfMywgdDAuYWRkcmVzcyBBUyBhZGRyZXNzXzQsIHQwLnBob25lIEFTIHBob25lXzUsIHQwLmVtYWlsIEFTIGVtYWlsXzYsIHQwLnNlY3JldF9rZXkgQVMgc2VjcmV0X2tleV83LCB0MC5zZWNyZXRfZHVyYXRpb24gQVMgc2VjcmV0X2R1cmF0aW9uXzgsIHQwLmZvcmJpZCBBUyBmb3JiaWRfOSwgdDAuY3JlYXRlX3RpbWUgQVMgY3JlYXRlX3RpbWVfMTAsIHQwLnVwZGF0ZV90aW1lIEFTIHVwZGF0ZV90aW1lXzExLCB0MC5kZWxldGVfdGltZSBBUyBkZWxldGVfdGltZV8xMiwgdDAucm9sZV9pZCBBUyByb2xlX2lkXzEzIEZST00gdXNlciB0MCBXSEVSRSB0MC51c2VybmFtZSA9ID8gQU5EICgodDAuZGVsZXRlX3RpbWUgSVMgTlVMTCkpIExJTUlUIDEgWyJhZG1pbiJdIFtdClsyMDE4LTA5LTA4IDEzOjIwOjI1XSBkb2N0cmluZS5ERUJVRzogU0VMRUNUIHQwLmlkIEFTIGlkXzEsIHQwLmNvZGUgQVMgY29kZV8yLCB0MC5uYW1lIEFTIG5hbWVfMywgdDAuY3JlYXRlX3RpbWUgQVMgY3JlYXRlX3RpbWVfNCwgdDAudXBkYXRlX3RpbWUgQVMgdXBkYXRlX3RpbWVfNSwgdDAuZGVsZXRlX3RpbWUgQVMgZGVsZXRlX3RpbWVfNiBGUk9NIHJvbGUgdDAgV0hFUkUgdDAuaWQgPSA/IEFORCAoKHQwLmRlbGV0ZV90aW1lIElTIE5VTEwpKSBbMV0gW10KWzIwMTgtMDktMDggMTM6MjA6MjZdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgY291bnQoRElTVElOQ1QgYTBfLmlkKSBBUyBzY2xyXzAgRlJPTSBhcGlfbWVzc2FnZSBhMF8gV0hFUkUgYTBfLnJlcXVlc3RfdGltZSA+ID8gWzE1MzA1MDg2MjVdIFtdClsyMDE4LTA5LTA4IDEzOjIwOjI4XSBkb2N0cmluZS5ERUJVRzogU0VMRUNUIHQwLmlkIEFTIGlkXzEsIHQwLmNvZGUgQVMgY29kZV8yLCB0MC5uYW1lIEFTIG5hbWVfMywgdDAuY3JlYXRlX3RpbWUgQVMgY3JlYXRlX3RpbWVfNCwgdDAudXBkYXRlX3RpbWUgQVMgdXBkYXRlX3RpbWVfNSwgdDAuZGVsZXRlX3RpbWUgQVMgZGVsZXRlX3RpbWVfNiwgdDAuYXBwbGljYXRpb25faWQgQVMgYXBwbGljYXRpb25faWRfNyBGUk9NIGFwaV9jYXRlZ29yeSB0MCBbXSBbXQpbMjAxOC0wOS0wOCAxMzoyMDoyOF0gZG9jdHJpbmUuREVCVUc6IFNFTEVDVCB0MC5pZCBBUyBpZF8xLCB0MC5hcHBfY29kZSBBUyBhcHBfY29kZV8yLCB0MC5hcHBfbmFtZSBBUyBhcHBfbmFtZV8zLCB0MC5jcmVhdGVfdGltZSBBUyBjcmVhdGVfdGltZV80LCB0MC51cGRhdGVfdGltZSBBUyB1cGRhdGVfdGltZV81LCB0MC5kZWxldGVfdGltZSBBUyBkZWxldGVfdGltZV82IEZST00gYXBwbGljYXRpb24gdDAgW10gW10KWzIwMTgtMDktMDggMTM6MjA6MjhdIGRvY3RyaW5lLkRFQlVHOiBTRUxFQ1QgRElTVElOQ1QgYTBfLmlkIEFTIGlkXzAsIGEwXy51cGRhdGVfdGltZSBBUyB1cGRhdGVfdGltZV8xIEZST00gYXBpX21lc3NhZ2UgYTBfIFdIRVJFIGEwXy5yZXF1ZXN0X3RpbWUgPiA/IE9SREVSIEJZIGEwXy51cGRhdGVfdGltZSBERVNDIExJTUlUIDE1IE9GRlNFVCAxNSBbMTUzMDUwODYyNV0gW10K</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ClsyMDE4LTA5LTA4IDEzOjIwOjI1XSBkb2N0cmluZS5ERUJVRzogU0VMRUNUIHQwLmlkIEFTIGlkXzEsIHQwLnVzZXJuYW1lIEFTIHVzZXJuYW1lXzIsIHQwLnBhc3N3ZCBBUyBwYXNzd2RfMywgdDAuYWRkcmVzcyBBUyBhZGRyZXNzXzQsIHQwLnBob25lIEFTIHBob25lXzUsIHQwLmVtYWlsIEFTIGVtYWlsXzYsIHQwLnNlY3JldF9rZXkgQVMgc2VjcmV0X2tleV83LCB0MC5zZWNyZXRfZHVyYXRpb24gQVMgc2VjcmV0X2R1cmF0aW9uXzgsIHQwLmZvcmJpZCBBUyBmb3JiaWRfOSwgdDAuY3JlYXRlX3RpbWUgQVMgY3JlYXRlX3RpbWVfMTAsIHQwLnVwZGF0ZV90aW1lIEFTIHVwZGF0ZV90aW1lXzExLCB0MC5kZWxldGVfdGltZSBBUyBkZWxldGVfdGltZV8xMiwgdDAucm9sZV9pZCBBUyByb2xlX2lkXzEzIEZST00gdXNlciB0MCBXSEVSRSB0MC51c2VybmFtZSA9ID8gQU5EICgodDAuZGVsZXRlX3RpbWUgSVMgTlVMTCkpIExJTUlUIDEgWyJhZG1pbiJdIFtdCg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64"></text>
      </register>
      <register name=":" type="4">
        <text>wq</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxGQUlMX0tFWVw+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxGQUlMX0tFWVw+</last-pattern>
      <last-replace>COUNT_EMPTY_KEYS</last-replace>
      <last-substitute encoding="base64">XDxGQUlMX0tFWVw+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxsb2dmaWxlXD4=</entry>
        <entry encoding="base64">XDxfU0VSVkVSXD4=</entry>
        <entry>$_SERVER</entry>
        <entry>homeTrendStat</entry>
        <entry encoding="base64">XDxob21lVHJlbmRTdGF0XD4=</entry>
        <entry>home</entry>
        <entry>chart</entry>
        <entry>chartPercentageStat</entry>
        <entry encoding="base64">XDxFTVBUWV9LRVlTXD4=</entry>
        <entry>EMPTY_KEYS</entry>
        <entry encoding="base64">XDxGQUlMX0tFWVw+</entry>
      </history-search>
      <history-cmd>
        <entry>.,$s/$_SERVER/data/g</entry>
        <entry>.,$s/$_SERVER/$data/g</entry>
        <entry>sp</entry>
        <entry>vs</entry>
        <entry>90</entry>
        <entry>%s/EMPTY_KEYS/COUNT_EMPTY_KEYS</entry>
        <entry>wq</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>