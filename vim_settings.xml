<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/www/demo/work/wsdlgeneold/src/main.php" timestamp="1535187941808">
        <mark key="[" line="52" column="41" />
        <mark key="]" line="52" column="41" />
        <mark key="." line="52" column="41" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/CacheStatService.php" timestamp="1535333666813">
        <mark key="[" line="35" column="35" />
        <mark key="]" line="35" column="52" />
        <mark key="." line="35" column="35" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/ApiServiceMethodService.php" timestamp="1536288445684">
        <mark key="[" line="30" column="0" />
        <mark key="]" line="30" column="0" />
        <mark key="." line="30" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1537413163352">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" timestamp="1537438965484">
        <mark key="[" line="267" column="0" />
        <mark key="]" line="267" column="0" />
        <mark key="." line="267" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/vendor/dhcmediway/wsdl2phpgenerator/src/Method.php" timestamp="1535179252102">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/ApiServiceMethod.php" timestamp="1535204422950">
        <mark key="[" line="59" column="67" />
        <mark key="]" line="59" column="48" />
        <mark key="." line="59" column="48" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/bin/console" timestamp="1537349844674">
        <mark key="[" line="17" column="80" />
        <mark key="]" line="19" column="0" />
        <mark key="." line="19" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/RegionStatDayService.php" timestamp="1537438115889">
        <mark key="[" line="53" column="1" />
        <mark key="]" line="53" column="1" />
        <mark key="." line="53" column="1" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessServer/RestRequest.php" timestamp="1536731584389">
        <mark key="[" line="93" column="8" />
        <mark key="]" line="93" column="8" />
        <mark key="." line="93" column="8" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/SoapInit/SoapInit5b3dbefb68018/PublicService.php" timestamp="1537339824078" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/ApiStatDayService.php" timestamp="1537432937260">
        <mark key="[" line="29" column="65" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Security/TokenAuthenticator.php" timestamp="1537350036435">
        <mark key="[" line="159" column="0" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/request.php" timestamp="1535199052253">
        <mark key="[" line="23" column="53" />
        <mark key="]" line="23" column="53" />
        <mark key="." line="23" column="53" />
      </file>
      <file name="$USER_HOME$/www/ihospital/qy_web/liuende/test.php" timestamp="1535970065654">
        <mark key="[" line="64" column="37" />
        <mark key="]" line="64" column="37" />
        <mark key="." line="64" column="37" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiMessageRepository.php" timestamp="1536848227952">
        <mark key="[" line="123" column="34" />
        <mark key="]" line="10" column="0" />
        <mark key="." line="10" column="0" />
      </file>
      <file name="$USER_HOME$/www/demo/webservicestest/soap.php" timestamp="1537327905283">
        <mark key="[" line="19" column="11" />
        <mark key="]" line="19" column="11" />
        <mark key="." line="19" column="11" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/ApiServiceMethodServiceImpl.php" timestamp="1537424719939" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/ToolServiceImpl.php" timestamp="1537259723471">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/liuende/soap.php" timestamp="1535092978277">
        <mark key="[" line="11" column="34" />
        <mark key="]" line="14" column="0" />
        <mark key="." line="14" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/ApiMessage.php" timestamp="1536307986451">
        <mark key="[" line="83" column="53" />
        <mark key="]" line="83" column="63" />
        <mark key="." line="83" column="53" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/soap.php" timestamp="1535197310228">
        <mark key="[" line="27" column="48" />
        <mark key="]" line="27" column="25" />
        <mark key="." line="27" column="25" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-11.log" timestamp="1536641478568">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-07.log" timestamp="1536309627710">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Development/MessageTraceController.php" timestamp="1536403509575">
        <mark key="[" line="16" column="0" />
        <mark key="]" line="16" column="0" />
        <mark key="." line="16" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/ApiMessageService.php" timestamp="1536851007899">
        <mark key="[" line="22" column="57" />
        <mark key="]" line="23" column="0" />
        <mark key="." line="23" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/AdminServiceImpl.php" timestamp="1537258724195">
        <mark key="[" line="124" column="14" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/merge.sh" timestamp="1537442714280" />
      <file name="$USER_HOME$/www/dhccam-2.0/shell/message.sh" timestamp="1537265935987">
        <mark key="[" line="21" column="90" />
        <mark key="]" line="21" column="335" />
        <mark key="." line="21" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/SignGenerator/20180905.log" timestamp="1536114307752">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/HomeServiceImpl.php" timestamp="1536403564805">
        <mark key="[" line="111" column="0" />
        <mark key="]" line="111" column="0" />
        <mark key="." line="111" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Resources/config/rabbitmq.yml" timestamp="1537264145634">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/BaseStatService.php" timestamp="1537437079838">
        <mark key="[" line="69" column="18" />
        <mark key="]" line="24" column="0" />
        <mark key="." line="24" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/RegionHospitalServiceImpl.php" timestamp="1537257614305">
        <mark key="[" line="31" column="2" />
        <mark key="]" line="31" column="2" />
        <mark key="." line="31" column="2" />
        <mark key="^" line="10" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Exception/RPCTimeOutException.php" timestamp="1537347248950">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/vendor/guzzlehttp/guzzle/src/functions.php" timestamp="1537425831210" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Development/ServerController.php" timestamp="1537257050732" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/ApiStatDay.php" timestamp="1537241339682" />
      <file name="$USER_HOME$/www/dhccam-2.0/shell/redismessage.sh" timestamp="1537014462159">
        <mark key="[" line="7" column="5" />
        <mark key="]" line="7" column="5" />
        <mark key="." line="7" column="5" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/RegionStatDayServiceImpl.php" timestamp="1537440633477">
        <mark key="'" line="153" column="13" />
        <mark key="[" line="293" column="5" />
        <mark key="]" line="295" column="0" />
        <mark key="." line="295" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/logrotate.sh" timestamp="1536990657880">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Exception/UnauthorizedException.php" timestamp="1537432208332" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Statistics/RegionController.php" timestamp="1537440882101">
        <mark key="[" line="104" column="38" />
        <mark key="]" line="104" column="37" />
        <mark key="." line="104" column="37" />
        <mark key="^" line="24" column="5" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/shell/accesslog.sh" timestamp="1537021693844">
        <mark key="[" line="13" column="12" />
        <mark key="]" line="16" column="14" />
        <mark key="." line="16" column="14" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/shell/crontab" timestamp="1537443206471">
        <mark key="'" line="6" column="6" />
        <mark key="[" line="14" column="0" />
        <mark key="]" line="13" column="73" />
        <mark key="." line="13" column="73" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Filter/ApiConfigService.php" timestamp="1537251282541" />
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/output/WebServiceEntryService.php" timestamp="1535089130255">
        <mark key="[" line="36" column="0" />
        <mark key="]" line="36" column="0" />
        <mark key="." line="36" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/sync.sh" timestamp="1537344449154">
        <mark key="[" line="7" column="14" />
        <mark key="]" line="7" column="14" />
        <mark key="." line="7" column="14" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Exception/ExceptionCode.php" timestamp="1537432183535">
        <mark key="[" line="35" column="35" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Command/StatTool/ClearCommand.php" timestamp="1537424194780">
        <mark key="[" line="187" column="0" />
        <mark key="]" line="187" column="0" />
        <mark key="." line="187" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatDayServiceImpl.php" timestamp="1537440587618">
        <mark key="[" line="108" column="5" />
        <mark key="]" line="84" column="0" />
        <mark key="." line="84" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/RegionStatDayServiceImpl/20180920.log" timestamp="1537426441147">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/app/config/parameters.yml" timestamp="1537409605439">
        <mark key="[" line="4" column="26" />
        <mark key="]" line="6" column="34" />
        <mark key="." line="6" column="34" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" timestamp="1535342387257">
        <mark key="[" line="484" column="13" />
        <mark key="]" line="484" column="13" />
        <mark key="." line="484" column="13" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/StatisticsService.php" timestamp="1537259378973" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Command/StatTool/RegionCreateCommand.php" timestamp="1537427908986">
        <mark key="'" line="82" column="19" />
        <mark key="[" line="82" column="12" />
        <mark key="]" line="82" column="12" />
        <mark key="." line="82" column="12" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" timestamp="1537440600652">
        <mark key="[" line="946" column="7" />
        <mark key="]" line="158" column="0" />
        <mark key="^" line="921" column="89" />
        <mark key="." line="158" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/Api.php" timestamp="1537241283935">
        <mark key="[" line="67" column="43" />
        <mark key="]" line="67" column="42" />
        <mark key="^" line="67" column="42" />
        <mark key="." line="67" column="42" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Api/ApiServiceController.php" timestamp="1537259688128" />
      <file name="$USER_HOME$/www/dhccam-2.0/mwb/dhccam-user.sql" timestamp="1537257854335">
        <mark key="[" line="21" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessServer/BusinessServer.php" timestamp="1537349807337">
        <mark key="[" line="69" column="16" />
        <mark key="]" line="69" column="16" />
        <mark key="." line="69" column="16" />
      </file>
      <file name="$APPLICATION_HOME_DIR$/plugins/php/lib/php.jar!/stubs/soap/soap.php" timestamp="1537337820982" />
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" timestamp="1536402774065">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/ApiStatServiceImpl/20180910.log" timestamp="1536632999127">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiStatDayRepository.php" timestamp="1537436077186" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/ApiStatService.php" timestamp="1537436655853">
        <mark key="[" line="107" column="32" />
        <mark key="]" line="110" column="34" />
        <mark key="." line="110" column="34" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/TestService.php" timestamp="1537259396752" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/RegionHospitalService.php" timestamp="1537257142818">
        <mark key="[" line="9" column="4" />
        <mark key="]" line="9" column="4" />
        <mark key="." line="9" column="4" />
        <mark key="^" line="8" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/app/config/config.yml" timestamp="1536471435945">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/dev-2018-09-09.log" timestamp="1536477916184">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/RegionHospital.php" timestamp="1537241256390">
        <mark key="[" line="206" column="2" />
        <mark key="]" line="206" column="2" />
        <mark key="." line="206" column="2" />
        <mark key="^" line="50" column="17" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Exception/GatewayException.php" timestamp="1537347067029">
        <mark key="[" line="70" column="34" />
        <mark key="]" line="70" column="34" />
        <mark key="." line="70" column="34" />
        <mark key="^" line="111" column="14" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Service.php" timestamp="1536068538361">
        <mark key="[" line="167" column="23" />
        <mark key="]" line="167" column="23" />
        <mark key="." line="167" column="23" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApplicationRepository.php" timestamp="1537435195246" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessProcess/BusinessProcess.php" timestamp="1537323678929" />
      <file name="$USER_HOME$/www/lnmp/include/init.sh" timestamp="1535598429701">
        <mark key="[" line="455" column="8" />
        <mark key="]" line="455" column="8" />
        <mark key="." line="455" column="8" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-12.log" timestamp="1536747127422">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/ApiStatTimeService.php" timestamp="1537412338648" />
      <file name="$USER_HOME$/www/dhccam-2.0/vendor/dhcmediway/wsdl2phpgenerator/src/Generator.php" timestamp="1535204800564">
        <mark key="[" line="165" column="27" />
        <mark key="]" line="165" column="27" />
        <mark key="." line="165" column="27" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/mwb/dhccam-region.sql" timestamp="1537428155064">
        <mark key="[" line="36" column="10" />
        <mark key="]" line="37" column="3" />
        <mark key="." line="37" column="3" />
      </file>
      <file name="/BusinessServer.php" timestamp="1537347726030" />
      <file name="/rabbitmq.yml" timestamp="1537253970580" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Statistics/InterfaceController.php" timestamp="1536552368077">
        <mark key="[" line="104" column="0" />
        <mark key="]" line="104" column="0" />
        <mark key="." line="104" column="0" />
      </file>
      <file name="$USER_HOME$/www/ihospital/qy_web/app/logs/XmlHelper/20180902.log" timestamp="1535874696635">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/Filter/SignGenerator.php" timestamp="1536832830086">
        <mark key="[" line="131" column="4" />
        <mark key="]" line="127" column="0" />
        <mark key="." line="127" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Entity/Hospital.php" timestamp="1537240576460">
        <mark key="[" line="1" column="0" />
      </file>
      <file name="/PHP Console" timestamp="1537441205740">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/web/app_dev.php" timestamp="1537349860551" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessServer/SoapRequest.php" timestamp="1537347012720">
        <mark key="[" line="113" column="45" />
        <mark key="]" line="122" column="36" />
        <mark key="." line="122" column="36" />
        <mark key="^" line="122" column="36" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Method.php" timestamp="1535175135112">
        <mark key="[" line="53" column="0" />
        <mark key="]" line="53" column="0" />
        <mark key="." line="53" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/TestServiceImpl.php" timestamp="1537259490186" />
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/ApiStatTimeRepository.php" timestamp="1536848323978">
        <mark key="[" line="27" column="32" />
        <mark key="]" line="27" column="32" />
        <mark key="." line="27" column="32" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-20.log" timestamp="1537440902117">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1537443391596">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Statistics/RegionHospitalController.php" timestamp="1537440464374">
        <mark key="[" line="116" column="4" />
        <mark key="]" line="26" column="0" />
        <mark key="^" line="24" column="53" />
        <mark key="." line="26" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/dev.log" timestamp="1536834792868">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/src/main.php" timestamp="1536491662956">
        <mark key="[" line="14" column="18" />
        <mark key="]" line="14" column="18" />
        <mark key="." line="14" column="18" />
      </file>
      <file name="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Location.php" timestamp="1535173669776">
        <mark key="[" line="57" column="0" />
        <mark key="]" line="57" column="0" />
        <mark key="." line="57" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/RegionStatDayRepository.php" timestamp="1537440558584">
        <mark key="'" line="47" column="81" />
        <mark key="[" line="83" column="1" />
        <mark key="]" line="83" column="1" />
        <mark key="." line="83" column="1" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Controller/Base/AdminController.php" timestamp="1536913368258">
        <mark key="[" line="75" column="40" />
        <mark key="]" line="75" column="0" />
        <mark key="." line="75" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Service/Impl/Client.php" timestamp="1536403375821">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/BaseStatServiceImpl.php" timestamp="1537437935635">
        <mark key="[" line="97" column="69" />
        <mark key="]" line="97" column="68" />
        <mark key="." line="97" column="68" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/prod-2018-09-09.log" timestamp="1536477855795">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/app/config/config_dev.yml" timestamp="1536926219995">
        <mark key="[" line="18" column="42" />
        <mark key="]" line="15" column="8" />
        <mark key="." line="15" column="8" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/vendor/php-amqplib/php-amqplib/PhpAmqpLib/Wire/AMQPReader.php" timestamp="1537347132833" />
      <file name="$USER_HOME$/www/demo/util/moniorwx.php" timestamp="1536135663222">
        <mark key="[" line="35" column="18" />
        <mark key="]" line="35" column="18" />
        <mark key="." line="35" column="18" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/var/logs/Exception/20180908.log" timestamp="1536405612533">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/ToolService.php" timestamp="1537259423747">
        <mark key="[" line="16" column="22" />
        <mark key="]" line="16" column="22" />
        <mark key="." line="16" column="22" />
      </file>
    </filemarks>
    <jumps>
      <jump line="232" column="48" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="225" column="4" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="1241" column="15" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="1262" column="0" filename="$USER_HOME$/www/dhccam-2.0/liuende/test.php" />
      <jump line="20" column="33" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-16.log" />
      <jump line="74" column="19" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="23" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="65" column="36" filename="$USER_HOME$/www/dhccam-2.0/src/RabbitMQBundle/Command/SwooleConsumerCommand.php" />
      <jump line="146" column="23" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="210" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="29" column="9" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="426" column="8" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="39" column="10" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/CacheStatServiceImpl.php" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-08-21.log" />
      <jump line="11" column="22" filename="$USER_HOME$/www/dhccam-2.0/app/config/config_dev.yml" />
      <jump line="44" column="23" filename="$USER_HOME$/www/dhccam-2.0/branches.txt" />
      <jump line="59" column="60" filename="$USER_HOME$/www/dhccam-2.0/src/AdminBundle/Service/Impl/ApiServiceMethodServiceImpl.php" />
      <jump line="390" column="25" filename="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Generator.php" />
      <jump line="139" column="44" filename="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Service.php" />
      <jump line="170" column="54" filename="$USER_HOME$/www/demo/work/wsdlgenerator/vendor/dhcmediway/wsdl2phpgenerator/src/Service.php" />
      <jump line="19" column="358" filename="$USER_HOME$/www/ihospital/qy_web/app/logs/XmlHelper/20180902.log" />
      <jump line="2" column="21" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-07.log" />
      <jump line="1" column="1" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-07.log" />
      <jump line="18" column="15" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="7" column="686" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="25" column="169" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="303" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="15" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="20" column="356" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="127" column="40" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="115" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="96" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="93" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="89" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="80" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="75" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="59" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="53" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="34" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="24" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/BaseStatRepository.php" />
      <jump line="268" column="72" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="1" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="11" column="22" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="12" column="370" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="17" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="13" column="422" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="21" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="8" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="19" column="41" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="58" column="41" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="108" column="309" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="123" column="555" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="146" column="144" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-08.log" />
      <jump line="142" column="27" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiMessageServiceImpl.php" />
      <jump line="30" column="22" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ConsumerTaskServiceImpl.php" />
      <jump line="905" column="45" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="907" column="24" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Server/DaemonServer.php" />
      <jump line="408" column="4" filename="$USER_HOME$/www/dhccam-2.0/src/SwooleBundle/Service/Impl/Client.php" />
      <jump line="18" column="26" filename="$USER_HOME$/www/dhccam-2.0/var/logs/Exception/20180908.log" />
      <jump line="586" column="16" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="610" column="28" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="190" column="19" filename="$USER_HOME$/www/dhccam-2.0/app/config/config.yml" />
      <jump line="4443" column="17" filename="$USER_HOME$/www/dhccam-2.0/var/logs/prod-2018-09-09.log" />
      <jump line="17" column="41" filename="$USER_HOME$/www/dhccam-2.0/var/logs/dev-2018-09-09.log" />
      <jump line="10" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/SignGenerator/20180909.log" />
      <jump line="4" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/SignGenerator/20180909.log" />
      <jump line="813" column="13" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="825" column="35" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="13" column="26" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-10.log" />
      <jump line="0" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-10.log" />
      <jump line="2462" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-10.log" />
      <jump line="1" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-10.log" />
      <jump line="1" column="164" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-11.log" />
      <jump line="10" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-11.log" />
      <jump line="3" column="22" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-11.log" />
      <jump line="896" column="38" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="16" column="24" filename="$USER_HOME$/www/dhccam-2.0/var/logs/ApiStatServiceImpl/20180910.log" />
      <jump line="898" column="27" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/ApiStatServiceImpl.php" />
      <jump line="6" column="0" filename="$USER_HOME$/www/dhccam-2.0/var/logs/ApiStatServiceImpl/20180911.log" />
      <jump line="5" column="244" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-11.log" />
      <jump line="11" column="171" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-11.log" />
      <jump line="16" column="252" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-11.log" />
      <jump line="3" column="11" filename="$USER_HOME$/www/dhccam-2.0/app/config/rabbitmq.yml" />
      <jump line="202" column="212" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-12.log" />
      <jump line="40" column="16" filename="$USER_HOME$/www/dhccam-2.0/var/logs/dev.log" />
      <jump line="20" column="5" filename="$USER_HOME$/www/dhccam-2.0/logrotate.sh" />
      <jump line="99" column="11" filename="$USER_HOME$/www/dhccam-2.0/logrotate.sh" />
      <jump line="36" column="45" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/MessageQueue/Consumer/ApiCallServer.php" />
      <jump line="6" column="6" filename="$USER_HOME$/www/dhccam-2.0/shell/crontab" />
      <jump line="83" column="44" filename="$USER_HOME$/www/dhccam-2.0/src/GatewayBundle/BusinessServer/BusinessServer.php" />
      <jump line="132" column="13" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Service/Impl/RegionStatDayServiceImpl.php" />
      <jump line="4" column="47" filename="$USER_HOME$/www/dhccam-2.0/var/logs/RegionStatDayServiceImpl/20180920.log" />
      <jump line="83" column="19" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Command/StatTool/RegionCreateCommand.php" />
      <jump line="11" column="1" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/RegionHospitalRepository.php" />
      <jump line="12" column="0" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/RegionHospitalRepository.php" />
      <jump line="35" column="81" filename="$USER_HOME$/www/dhccam-2.0/src/AppBundle/Repository/RegionStatDayRepository.php" />
      <jump line="19" column="23" filename="$USER_HOME$/www/dhccam-2.0/var/logs/doctrine/doctrine-2018-09-20.log" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text encoding="base64">JiYgY2hvd24gLVIgd3d3Ond3dyAvaG9tZS93d3dyb290L2RoY2NhbS0yLjA=</text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">JiYgY2hvd24gLVIgd3d3Ond3dyAvaG9tZS93d3dyb290L2RoY2NhbS0yLjA=</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxhc1w+</text>
      </register>
      <register name="0" type="4">
        <text />
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="4">
        <text encoding="base64">ICAgICAgIGlmICgkaW5kZXhCeSkgewogICAgICAgICAgICAkcnNtLT5hZGRJbmRleEJ5U2NhbGFyKCdpZCcpOwogICAgICAgIH0=</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64">ICAgICAgIGlmKCRzdGF0dXMgPT09IDApewoKICAgICAgICB9ZWxzZWlmICgkc3RhdHVzID09PSAxKQ==</text>
      </register>
      <register name="4" type="4">
        <text encoding="base64">ICAgICAkc3ViV2hlcmUgPSAnJzsKICAgICAgICAvLyDmjIflrprmn6Xor6LojIPlm7QKICAgICAgICBpZiAoJHN0YXR1cyA9PT0gMCkgewogICAgICAgICAgICAkc3ViV2hlcmUgPSAnIEFuZCB0LnN0YXR1cyA9ICcgLiAkc3RhdHVzIC4gJyAnOwogICAgICAgIH0=</text>
      </register>
      <register name="5" type="4">
        <text encoding="base64">ICAgICAgICAkbGltaXQgPSAnJzsKICAgICAgICAvLyDmjIflrprmnIDlpKfmn6Xor6LmlbDph48KICAgICAgICBpZiAoJHRvcCAmJiBcaXNfaW50KCR0b3ApKSB7CiAgICAgICAgICAgICRsaW1pdCA9ICcgTElNSVQgJyAuICR0b3A7CiAgICAgICAgfQ==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgY2hhcnRCYXJTdGF0KCkgbWV0aG9kLgo=</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64">ICAgICAgICAgICBjYXNlICd0b2RheSc6CiAgICAgICAgICAgICAgICAkc3RhcnQgPSBuZXcgRGF0ZVRpbWUoJ3RvZGF5IG1pZG5pZ2h0Jyk7CiAgICAgICAgICAgICAgICAkZW5kID0gbmV3IERhdGVUaW1lKCd0b21vcnJvdyBtaWRuaWdodCcpOw==</text>
      </register>
      <register name="8" type="4">
        <text encoding="base64">ICAgewogICAgICAgIAogICAgfQ==</text>
      </register>
      <register name="9" type="4">
        <text encoding="base64">ICAgICAgICAvLyDmn7Hnirblm74KICAgICAgICAkYmFyID0gW107</text>
      </register>
      <register name=":" type="4">
        <text>wq</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxhc1w+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxhc1w+</last-pattern>
      <last-replace>COUNT_EMPTY_KEYS</last-replace>
      <last-substitute encoding="base64">XDxGQUlMX0tFWVw+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxsb2dmaWxlXD4=</entry>
        <entry encoding="base64">XDxfU0VSVkVSXD4=</entry>
        <entry>$_SERVER</entry>
        <entry>homeTrendStat</entry>
        <entry encoding="base64">XDxob21lVHJlbmRTdGF0XD4=</entry>
        <entry>home</entry>
        <entry>chart</entry>
        <entry>chartPercentageStat</entry>
        <entry encoding="base64">XDxFTVBUWV9LRVlTXD4=</entry>
        <entry>EMPTY_KEYS</entry>
        <entry encoding="base64">XDxGQUlMX0tFWVw+</entry>
        <entry encoding="base64">XDxhdmdUaW1lXD4=</entry>
        <entry encoding="base64">XDxhc1w+</entry>
      </history-search>
      <history-cmd>
        <entry>.,$s/$_SERVER/data/g</entry>
        <entry>.,$s/$_SERVER/$data/g</entry>
        <entry>sp</entry>
        <entry>vs</entry>
        <entry>90</entry>
        <entry>%s/EMPTY_KEYS/COUNT_EMPTY_KEYS</entry>
        <entry>wq</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>